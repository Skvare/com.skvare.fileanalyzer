<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.skvare.fileanalyzer/xml/schema/CRM/Fileanalyzer/FileanalyzerScan.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:906dd3f8bbedf121eb3295f531a019cb)
 */
use CRM_Fileanalyzer_ExtensionUtil as E;

/**
 * Database access object for the FileanalyzerScan entity.
 */
class CRM_Fileanalyzer_DAO_FileanalyzerScan extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_file_analyzer_scan';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique FileanalyzerScan ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Directory type scanned
   *
   * @var string
   *   (SQL type: varchar(20))
   *   Note that values will be retrieved from the database as a string.
   */
  public $directory_type;

  /**
   * When scan was performed
   *
   * @var string
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $scan_date;

  /**
   * Total files found
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $total_files_scanned;

  /**
   * Files with references
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $active_files;

  /**
   * Files without references
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $abandoned_files;

  /**
   * Total size in bytes
   *
   * @var string
   *   (SQL type: bigint unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $total_size;

  /**
   * Abandoned files size in bytes
   *
   * @var string
   *   (SQL type: bigint unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $abandoned_size;

  /**
   * Scan duration in seconds
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $scan_duration;

  /**
   * Status: running, completed, failed
   *
   * @var string|null
   *   (SQL type: varchar(20))
   *   Note that values will be retrieved from the database as a string.
   */
  public $scan_status;

  /**
   * Error details if scan failed
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $error_message;

  /**
   * JSON with detailed statistics
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $statistics;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_file_analyzer_scan';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Fileanalyzer Scans') : E::ts('Fileanalyzer Scan');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique FileanalyzerScan ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.id',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'directory_type' => [
          'name' => 'directory_type',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Directory Type'),
          'description' => E::ts('Directory type scanned'),
          'required' => TRUE,
          'maxlength' => 20,
          'size' => CRM_Utils_Type::MEDIUM,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.directory_type',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Directory Type"),
          ],
          'pseudoconstant' => [
            'callback' => 'CRM_Fileanalyzer_BAO_FileAnalyzerScan::getDirectoryTypes',
          ],
          'add' => NULL,
        ],
        'scan_date' => [
          'name' => 'scan_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Scan Date'),
          'description' => E::ts('When scan was performed'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.scan_date',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'label' => E::ts("Scan Date"),
          ],
          'add' => NULL,
        ],
        'total_files_scanned' => [
          'name' => 'total_files_scanned',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Total Files Scanned'),
          'description' => E::ts('Total files found'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.total_files_scanned',
          'default' => '0',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
            'label' => E::ts("Total Files Scanned"),
          ],
          'add' => NULL,
        ],
        'active_files' => [
          'name' => 'active_files',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Active Files'),
          'description' => E::ts('Files with references'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.active_files',
          'default' => '0',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
            'label' => E::ts("Active Files"),
          ],
          'add' => NULL,
        ],
        'abandoned_files' => [
          'name' => 'abandoned_files',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Abandoned Files'),
          'description' => E::ts('Files without references'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.abandoned_files',
          'default' => '0',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
            'label' => E::ts("Abandoned Files"),
          ],
          'add' => NULL,
        ],
        'total_size' => [
          'name' => 'total_size',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Total Size'),
          'description' => E::ts('Total size in bytes'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.total_size',
          'default' => '0',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
            'label' => E::ts("Total Size"),
          ],
          'add' => NULL,
        ],
        'abandoned_size' => [
          'name' => 'abandoned_size',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Abandoned Size'),
          'description' => E::ts('Abandoned files size in bytes'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.abandoned_size',
          'default' => '0',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
            'label' => E::ts("Abandoned Size"),
          ],
          'add' => NULL,
        ],
        'scan_duration' => [
          'name' => 'scan_duration',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Scan Duration'),
          'description' => E::ts('Scan duration in seconds'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.scan_duration',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
            'label' => E::ts("Scan Duration"),
          ],
          'add' => NULL,
        ],
        'scan_status' => [
          'name' => 'scan_status',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Scan Status'),
          'description' => E::ts('Status: running, completed, failed'),
          'maxlength' => 20,
          'size' => CRM_Utils_Type::MEDIUM,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.scan_status',
          'default' => 'running',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
            'label' => E::ts("Scan Status"),
          ],
          'pseudoconstant' => [
            'callback' => 'CRM_Fileanalyzer_BAO_FileAnalyzerScan::getScanStatuses',
          ],
          'add' => NULL,
        ],
        'error_message' => [
          'name' => 'error_message',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Error Message'),
          'description' => E::ts('Error details if scan failed'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.error_message',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
            'label' => E::ts("Error Message"),
          ],
          'add' => NULL,
        ],
        'statistics' => [
          'name' => 'statistics',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Statistics'),
          'description' => E::ts('JSON with detailed statistics'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_file_analyzer_scan.statistics',
          'table_name' => 'civicrm_file_analyzer_scan',
          'entity' => 'FileanalyzerScan',
          'bao' => 'CRM_Fileanalyzer_DAO_FileanalyzerScan',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
            'label' => E::ts("Statistics"),
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'file_analyzer_scan', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'file_analyzer_scan', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_directory_type' => [
        'name' => 'index_directory_type',
        'field' => [
          0 => 'directory_type',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_file_analyzer_scan::0::directory_type',
      ],
      'index_scan_date' => [
        'name' => 'index_scan_date',
        'field' => [
          0 => 'scan_date',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_file_analyzer_scan::0::scan_date',
      ],
      'index_scan_status' => [
        'name' => 'index_scan_status',
        'field' => [
          0 => 'scan_status',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_file_analyzer_scan::0::scan_status',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
